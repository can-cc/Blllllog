title: 前端需不需要OOP
date: 2015-06-11 23:49:17
tags:
- 前端
- oop
---
##起因
前些天有位同学在qq上跟我吐槽，跟我说把工作辞了找新工作，但是却遇到了一个极其XX的面试官，在面试上大考算法，说真的，我那个同学技术挺屌的，但是早就潜心专研前端，算法没发挥好，于是便挂了。

##导火线
刚好昨天看到了一篇文章[前端，我为什么不要你](http://www.cnblogs.com/vans/p/4550356.html#!comments)，觉得不是很爽，说实话，不是很喜欢这类装逼的面试官。他问我同学前端OOP的问题，我当时听到就觉得纳闷，前端需要OOP吗，上网一查，在知乎上看到某些XX的人也在谈OOP，呵呵。

##声明，本篇文章仅仅对[前端，我为什么不要你](http://www.cnblogs.com/vans/p/4550356.html#!comments)这篇博客中一个问题进行讨论，本人才疏学浅并孤陋寡闻，说得不对请见谅。

##正文： 前端究竟需不需要OOP

####in short： 不需要！ Never！

###1、OOP是什么？前端需要吗？
具我在学校里的印象，OOP产生的年代是70s-80s，而60s-70s那会正经历着[软件危机](https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E5%8D%B1%E6%9C%BA)，于是，OOP这个新设计方法便如同救世主一样，拯救了许许多多程序员和项目，但是，由于那时候OOP是一个新事物，很多OOP的缺点没有暴漏出来。
说说我，我是从J2EE走过来的，领略过java完全面对对象的设计，也深深被java那啰嗦的语法所伤害，缓慢的开发效率，神出鬼没的继承，星罗密布的接口，还有很多装逼而用不上的设计模式总是被设计过度。
当然，我说那么多并不是为了说明OOP不好，我很欣赏OOP，但是不是在所有场合，尤其在前端。
Joe Armstrong (Erlang 发明人) 在 “Coders At work” 谈论过面向对象编程的重用性：

>“我认为缺少重用性是面向对象语言造成的，而不是函数式语言。面向对象语言的问题是，它们带着语言执行环境的所有隐含资讯四处乱窜。你想要的是香蕉，但看到的却是拿着香蕉的大猩猩和整个丛林”

公平点说，我的看法是这不是面向对象编程的本质问题。你可以写出函数式的面向对象程序，但确定的是：

-   典型的 OOP 倾向强调改变对象的状态。
-   典型的 OOP 倾向层与层之间紧密的耦合。
-   典型的 OOP 将同一性(identity)与状态的概念混在一起了。
-   数据与代码的混合引出了概念与实际操作中的问题。

很显然，前端是否适合OOP呢？答案是显然的。

###注意：我说的OOP指的是纯正的OOP，像backbone那样的框架我觉得挺好，但是不要认为写一个代表实体模型的js类就觉得自己在面对对象。

##前端应该专注展示，UI，交互。
前端就是前端，不是用来做业务的地方，当然业务UI也十分重要，但是你不可能在前端用OOP的思想来创建一系列的类，做一些无比要的继承，再在可维护性和的外衣下用一些设计模式的来让前端更复杂。
前端的javascript在某些方面上来讲是面对事件的，异步，事件依赖，在这个基础上做OOP是一件很搞笑的事情，本应该做UI，做交互的前端，你用OOP，用必要吗？OOP哪里？在浏览器后台需要设计成面对对象吗？有对象给你面对吗？ 根本就没有，一边是用户，一边是服务器，面对的只是数据，数据的交互，事件的响应，跟面对对象沾不上边（前面已经说过，backbone不是面对对象）。

##项目的庞大是面对对象的借口吗？
我觉得我首先需要讨论的是前端是否庞大？
####有的前端确实庞大，因为有很多网站依赖了很多库，很多历史遗留的文件（当然值得是js方面）
####前端不庞大，前端注定不需要承载很多业务UI，前端的js编码是分布在一个一个的文件下的，天生模块化。不要说我没见过市面之类的，我确实没有做个业务复杂的前端页面，但是我将要把淘宝拿出来说事了，淘宝算复杂了吧，chrome下F12一下，淘宝首页需要什么业务，除了UI的效果之外剩下什么，除了一些分析的接口又剩下什么，再除了管理层原因造成的冗余业务又剩下什么？很复杂吗？商品搜索复杂吗？导航栏复杂吗？商品页面复杂吗？一定都不复杂，在淘宝的技术储备下屁都不是，淘宝前端OOP了吗？没有，当然他们会进行一定的共享对象化来实现子系统之间的通信，但是没有OOP，页面复杂并不是OOP的借口，不是你懂一些设计方法装逼的借口，不是你从后端转来前端想炫耀的借口。
