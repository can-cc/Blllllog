#+TITLE: 记一次研究浏览器网络请求挂起过程
#+AUTHOR: 陳放為

最近排查了一个 Chrome 中请求挂起的问题

** 起因
在某次 web 性能测试中，被发现前端 ajax 请求数量颇为巨大，而且在相对较后的请求中，有 ajax 请求处于 stalled （挂起状态），如图：

[[image-url:./记一次研究浏览器网络请求挂起过程/ce0a15497ba3bde9c62b285b16d359ab]]

什么是stalled呢？下面是一段比较容易懂的解释：


#+BEGIN_QUOTE

Time the request spent waiting before it could be sent. This time is inclusive of any time spent in proxy negotiation.Additionally, this time will include when the browser is waiting for an already established connection to become available for re-use, obeying Chrome’s maximum six TCP connection per origin rule.
#+END_QUOTE


也即是从TCP连接建立完成，到真正可以传输数据之间的时间差。先让我们要分析TCP连接为什么要等待这么久才能用？我用Wireshark抓包发现(如下图)，TCP连接过程中有多次重传，直到达到最大重传次数后连接被客户端重置。

** 初步分析
其实一开始看到这个问题我是觉得非常好解决的，因为在我的印象中，令请求 stalled 的原因不外乎是几个，查阅 chrome 最新的文档（[[https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#timing][查看请求的时间细分数据]]），跟我印象中的差不多。


[[image-url:./记一次研究浏览器网络请求挂起过程/a69fa4e85bcba845a59a5731403ca643]]

1. 存在更高优先级的请求
2. 此源已打开六个 TCP 连接，达到限值。 仅适用于 HTTP/1.0 和 HTTP/1.1。
3. 浏览器正在短暂分配磁盘缓存中的空间

第 1 基本排除，ajax 请求的优先级非常高
所以基本判断为第 2 点或者第 3点


** 继续排查，原因不明

继续排查问题，首先第三点（浏览器正在短暂分配磁盘缓存中的空间），直觉告诉我这个可能性不大，或者可以先不考虑这个问题，因为页面上的缓存配置都是比较合理的，而且 stalled 时间较长，可能性确实不大。

于是问题便聚焦在第二点上（此源已打开六个 TCP 连接，达到限值。 仅适用于 HTTP/1.0 和 HTTP/1.1），网站确实在 http1.1 协议下运行

但是据我发现，虽然网页上的 ajax 请求确实比较多，但是在出现 statlled 的时候，确实不多，并发的只有3条左右就出现 stalled 了， 比较令人费解。

谷歌一下，发现了几篇有用的文章

- [[http://fex.baidu.com/blog/2015/01/chrome-stalled-problem-resolving-process/][关于请求被挂起页面加载缓慢问题的追查]]
- [[][]]

《关于请求被挂起页面加载缓慢问题的追查》这篇文章上揭示了一个问题，Chrome 上错误的缓存处理可能会导致 stalled，那么就引导我把问题指向 Chrome-help 上说明 stalled 原因的第三点


#+BEGIN_QUOTE
3. 浏览器正在短暂分配磁盘缓存中的空间
#+END_QUOTE

文章上介绍了一种查看 chrome 网络日志的方法，但是我暂时不打算使用，因为文章上说，在他们的情况下，产生浏览器正在短暂分配磁盘缓存空间的情况是因为他们的 ajax 请求由于一些缓存设置问题，Chrome 在磁盘或者内存中查找缓存失效。

Chrome 缓存机制其实很简单，如果 url 不相同，那么缓存文件则不会存储到相同的地方。

那好，反正加个 query 时间戳并不费事。

于是乎，我就在每个 url 上了 =?t=5201314= 这样的时间戳


#+BEGIN_QUOTE
这样去缓存方式比较古老，一般是处理 IE 上强制缓存的时候才会使用，现在一般都是使用 http header 的方式
#+END_QUOTE

[[image-url:./记一次研究浏览器网络请求挂起过程/9a4bd9da1592461964956a32258957ca]]

但是很不幸，去除了之后效果强差人意，令人烦恼的 stalled 还继续出现

我就纳闷了，为啥突然会出现这样的情况呢，即使再多的请求，没有达到并发的 6 条限制啊，而且其它资源都是缓存下来的，根本不浪费网络资源。


** 查看 Chrome 网络日志
无奈，在 Chrome 的 devtool 上确实已经看不出什么端倪来了，只能按照文章中的方法来查看 Chrome 的网络日志了

首先打开 Chrome 新的 net-export

[[chrome://net-export/][chrome://net-export/]]

然后点击开始


[[image-url:./记一次研究浏览器网络请求挂起过程/2329b94212bc5043c358d4292c728e7e]]

在网页上操作一番

然后点 [Start Over]

然后保存起来

到 [[https://netlog-viewer.appspot.com/#import][https://netlog-viewer.appspot.com/#import]] 中导入刚才记录的 log 文件，然后就可以查看到 Chrome 网络日志


[[image-url:./记一次研究浏览器网络请求挂起过程/1a626ee04edf49225b49afbf872f5040]]

通过 Chrome 上显示 stalled 的请求，在这里面搜索出来那条请求的日志，可以通过日志里面的链接找到相关操作，例如

拜之前加了时间戳的福，在这个日志文件里面很快就找到了出了问题的那个请求

[[image-url:./记一次研究浏览器网络请求挂起过程/effffc04a7ab87e36b0d322eda64d090]]

然后通过 =source_dependency= 链接🔗定位，最后发现 stalled 的时间里，卡在了 =SOCKET_POOL_STALLED_MAX_SOCKETS_PER_GROUP= 里






** 虚惊一场


[[image-url:./记一次研究浏览器网络请求挂起过程/48423aaf80c447b3071203d3f908be15]]






[[image-url:./记一次研究浏览器网络请求挂起过程/b3635a105a1a258a7a4bb746d04ce91b]]

** 结论

虽然排查的结果有点可笑，但是所幸系统并无大问题，而且还学习到了如何查看 Chrome 的网络日志。

** 参考文章
1. [[https://foio.github.io/chrome-stalled/][chrome的timeline中stalled问题解析]]



