#+TITLE: 我的 ZSH 配置
#+AUTHOR: 陳放為

在 shell 领域，一开始接触的是最经典的 bash，对 zsh 真是一无所知，自从开始折腾 Arch，了解到了她默认的 zsh（我一般读作 z shell，也有人都作 z s h 的，其实后者的读法是正确，youtube 上的外国人都是这样读，只不过太过拗口），从此 shell 中的操作就开始高效起来。

常用的 shell 有 bash， zsh， sh， fish，dash。其中 fish 虽然酷炫了新颖，当时由于与主流的 bash 不兼容，一般没有人用。

** zgen

使用 zsh，有流行的 oh-my-zsh，但是我不是很喜欢，第一 omz 主要还是一大堆 alias （别名）,我不打喜欢别名，像我这种打字比较快的人来说，别名其实没有什么用，而且会造成依赖，容易忘记本来的命令，一到陌生的 shell 里头就懵逼了。

有一款 zsh 配置叫做 zgen 非常小众，但是我觉得还不错，虽然后面也有很多不错的 zsh 配置，但是我还是习惯 zgen， 启动速度比 oh-my-zsh 快很多，不像 oh-my-zsh 那样加载一大堆脚本，zgen 可以自由选择插件，包括 oh-my-zsh 插件和主题。

下面是我的 zgen 配置，

#+BEGIN_SRC sh
source "${HOME}/zgen/zgen.zsh"

export PATH="/usr/local/sbin:$PATH"
export LANG="zh_CN.UTF-8"
export LC_CTYPE="zh_CN.UTF-8"

# check if there's no init script
if ! zgen saved; then
    echo "Creating a zgen save"

    zgen oh-my-zsh

    # plugins
    zgen oh-my-zsh plugins/git
    zgen oh-my-zsh plugins/sudo
    zgen oh-my-zsh plugins/command-not-found
    zgen oh-my-zsh plugins/pip
    zgen oh-my-zsh plugins/sudo
    zgen oh-my-zsh plugins/aws
    zgen oh-my-zsh plugins/brew
    zgen oh-my-zsh plugins/chruby
    zgen oh-my-zsh plugins/colored-man
    zgen oh-my-zsh plugins/git
    zgen oh-my-zsh plugins/github
    zgen oh-my-zsh plugins/knife
    zgen oh-my-zsh plugins/knife_ssh
    zgen oh-my-zsh plugins/osx
    zgen oh-my-zsh plugins/python
    zgen oh-my-zsh plugins/rsync
    zgen oh-my-zsh plugins/screen
    zgen oh-my-zsh plugins/vagrant
    zgen load zsh-users/zsh-syntax-highlighting
    zgen load chrissicool/zsh-256color


    # completions
    zgen load zsh-users/zsh-completions src

    # theme
    zgen oh-my-zsh themes/af-magic


    #zgen load autosuggest-fzf-completion-orig

    # Set keystrokes for substring searching
    zmodload zsh/terminfo
    bindkey "$terminfo[kcuu1]" history-substring-search-up
    bindkey "$terminfo[kcud1]" history-substring-search-down

    # save all to init script
    zgen save
fi

bindkey '^f' vi-forward-word
bindkey '^e' vi-end-of-line

zle-line-init() {
    zle autosuggest-start
}
zle -N zle-line-init


[[ -s /home/aby/.autojump/etc/profile.d/autojump.sh ]] && source /home/aby/.autojump/etc/profile.d/autojump.sh


export EDITOR=nvim
export PATH=~/bin:$PATH
#+END_SRC


*** autosuggestion
    在 fish 里面的 autosuggestion 功能非常好用，于是我找到了一款 zsh 插件，也叫 autosuggestion，只需要加入 zgen 里面就能用了。
https://github.com/zsh-users/zsh-autosuggestions
#+BEGIN_SRC sh
zgen load tarruda/zsh-autosuggestions
#+END_SRC

*** substring search
    substring search 同样是一款好插件，例如想查找 git 的历史命令，只需要习惯性得打出 git，再按 Alt ＋ p， 就能找出 git 开头的命令.
#+BEGIN_SRC sh
zgen load zsh-users/zsh-history-substring-search
#+END_SRC


下面我就不介绍工具和插件了,一些好用的工具在我的这篇文章里面有介绍 [[./terminal-awesome-tool.html][[Terminal-awesome-tool]]]


** 有用的函数
*** dumb
下面的这段代码在 emacs 非常有用，解决了很多 eshell 的很多问题。
#+begin_src sh
if [[ "$TERM" == "dumb" ]]
then
  unsetopt zle
  unsetopt prompt_cr
  unsetopt prompt_subst
  unfunction precmd
  unfunction preexec
  PS1='$ '
fi
#+end_src


*** cat
带颜色的 cat 命令
#+begin_src sh
cat() {
    local out colored
    out=$(/bin/cat $@)
    colored=$(echo $out | pygmentize -f console -g 2>/dev/null)
    [[ -n $colored ]] && echo "$colored" || echo "$out"
}
#+end_src

*** percol
percol 的几个好用函数 (percol请看这篇文章 [[./terminal-awesome-tool.html][[Terminal-awesome-tool]]] )
第一个是交互搜索进程
第二个是交互杀死进程
#+begin_src sh
function ppgrep() {
    if [[ $1 == "" ]]; then
        PERCOL=percol
    else
        PERCOL="percol --query $1"
    fi
    ps aux | eval $PERCOL | awk '{ print $2 }'
}

function ppkill() {
    if [[ $1 =~ "^-" ]]; then
        QUERY=""            # options only
    else
        QUERY=$1            # with a query
        [[ $# > 0 ]] && shift
    fi
    ppgrep $QUERY | xargs kill $*
}
#+end_src

*** chpwd
    如果你也是那种 cd 进一个目录就习惯性地打下 ls 的人，下面的这个函数非常适合你，cd 进入目录后自动 ls
#+begin_src sh
function chpwd() {
    emulate -L zsh
    ls
}

#+end_src

*** exsit
判断一个命令是否存在，十分实用
    #+begin_src sh
    function exists { which $1 &> /dev/null }
    #+end_src
