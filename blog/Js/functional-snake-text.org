#+TITLE: JAVASCRIPT 函数式实现我文字蛇动
#+AUTHOR: 陳放為

之前一直对函数式编程感兴趣，最近再一次研究了一下 javascript 函数式编程应用，似乎又有了新的感悟。
之前认为函数式编程主要就是面对数据流，数据从一个函数进去，经过一个个函数“管子”，输出另一堆数据，扔进去一个函数，输出一个函数再执行。
好像是这样的，又不是这样的，遂写了一个小 demo，请看下面。
#+BEGIN_HTML

<div id="demo" style="padding: 1rem; border: 1px solid #999;">
<span>hover me: ↓↓↓↓↓↓</span>
<p style="color: #439f91; cursor: point;">JAVASCRIPT FUNCTIONAL</p>
</div>
<script src="./functional-snake-text/txtShakeDemo.bundle.js"></script>


#+END_HTML

#+BEGIN_SRC javascript
'use strict';

let $ = require('jquery'),
    _ = require('lodash'),
    R = require('ramda');



let getTxt = (dom) => {
    return dom.innerHTML;
};

let isUpper = (char) => {
    return char === char.toUpperCase();
};

let shake = _.curry((txt, i) => {
    let chars = txt.split('');
    let cf = isUpper(chars[i]) ?
        String.prototype.toLowerCase : String.prototype.toUpperCase;
    chars[i] = cf.apply(chars[i]);
    return chars.join('');
});

let setTxt = _.curry((dom, txt) => {
    dom.innerHTML = txt;
});


let txtSnake = (dom, interal) => {
    let txt = getTxt(dom),
        len = txt.length;

    let shakeTxt = shake(txt),
        setDomTxt = setTxt(dom);
    
    let setShake = R.compose(setDomTxt, shakeTxt);
    
    let i = 0;
    let timer = setInterval(() => {
        let ii = (i++) % len;
        setShake(ii);
    }, interal);
    
    return () => {
        if( timer ){
            setDomTxt(txt);
            clearInterval(timer);
        }
    };
};

export {txtSnake};

#+END_SRC

其实我觉得函数式编程最大特性就是代码的可描述性，写的代码都是描述性，在主体代码里面
