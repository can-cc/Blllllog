#+TITLE: Code Pattern
#+AUTHOR: 陳放為

* 代码规范己见

相信很多人都清楚得认识到，阅读代码是一件很烧脑的事情，无论是团队的代码，还是某种算法的代码，甚至是知名开源项目的代码，看起来，很容易让人懵逼。

其实 lisp 这种函数式编程语言比类 c 的指令式语言好读，因为 lisp 的代码虽然新手看起来很难看懂，但是其实懂这门语言的人看起来会非常舒服，完全是符合思维的走向的，代码的书写就是思维的展现，相方，类 c 的代码或多或少会迎合计算机的思维，很多代码都故意或者不是故意使用很多奇淫巧技，语言的特性，逼是装足了，性能并没有提升，却造成非常严重代码阅读障碍，甚至是，自己写的代码，几个月回头一看，竟然想不起这是什么意思，我觉得这种写法应该受到摒弃。

当然，这是水平问题，我承认，所以我觉得写出易读美观的代码需要一些准则。这个仓库记录着我一些对代码规范的见解，希望能引起讨论，提出 issue 大家互相学习。



* 变量
** 变量的命名
每个人程序员都有自己逻辑，完成一段程序的方法，每个人都有自己的方法和逻辑，变量是承载思维的主要载体，如果变量名取得过于简单，或者用一些别人看不懂的命名，会让阅读你代码的人非常痛苦和不解。
** 避免使用过于简单的命名
有些人喜欢使用一个字母的变量，在一些简单的逻辑上一点问题都没有，人一看就懂，但是在设计到算法和数据结构的程序上，过于简单的代码就直接让人懵逼了，让人看得不知所云，在阅读代码的时候要使劲想着这个 m 是 map，这个 a 是数组，这个 k 是某个 index，十分不便于阅读。
当然，i，j 用于循环，n 代表长度等等这些世界通用的就不必了。
** 我认为变量宜长不宜短
变量宜长不宜短，特别是编译性语言，变量写长了可以让意思更明白，即使是拙计的英语，也比短变量要好，不会让你看到一个变量名，令你误解，然后看代码的思维走下去，哎啊发现，原来这个变量并不是我想的那个意思。
下面举例一则：




* 操作符
** 四则运算
写代码不是在写数学，-i + j 这种代码不要写成 j + i，不然会使你的代码看起来非常混乱难读
